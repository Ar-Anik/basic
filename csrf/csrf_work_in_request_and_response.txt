--> First Time Form Visit After Login
Let‚Äôs say your user goes to:
üëâ www.example.com/part/add
But they‚Äôre not logged in, so Django redirects them to the login page. Let‚Äôs break this all down :

Step 1: Request to /part/add (Unauthenticated)
-> Request: The user makes a GET request to /part/add, e.g., by typing the URL in the browser.
-> Middleware Activation: The CsrfViewMiddleware runs, but at this point:
    * User has no session.
    * User has no CSRF cookie yet.
    * The middleware sees that this is a GET request, which is safe and does not need CSRF validation.

-> Permission Check: Django sees the view requires a logged-in user (e.g., via @login_required), so it
redirects to /accounts/login/.

-> CSRF Cookie Status: Still not set, unless the login page view or its template explicitly uses {% csrf_token %}
or get_token().

Step 2: Render Login Page
Django now serves the login form page (/accounts/login/):

-> Template Contains:
    <form method="post">
        {% csrf_token %}
        <!-- username/password fields -->
    </form>

Q: What Happens Here?
    * {% csrf_token %} triggers get_token(request) under the hood.
    * This creates a random secret, stores it in the request object, and sets a CSRF cookie in the response header.

# Example:
    Set-Cookie: csrftoken=ajd9lKf89aDFkd82jfLs09Dfjklsf34f; Path=/; SameSite=Lax

# The hidden input rendered in the form contains a masked token based on that secret.

Step 3: User Submits Login Form (POST Request)
-> Browser sends:
    1. POST request to /accounts/login/
    2. Includes csrfmiddlewaretoken field (masked token)
    3. Includes Cookie: csrftoken=...
-> Middleware does this:
    1. Unmasks the submitted token.
    2. Compares the unmasked value (secret) with the CSRF cookie‚Äôs secret.

‚úÖ Match ‚Üí allow request ‚Üí user is logged in.

Step 4: Redirect to /part/add Again (Now Authenticated)
-> Django redirects back to /part/add, now with an authenticated session.
-> New CSRF secret is generated after login:
    1. This is by design to avoid session fixation attacks.
    2. Old token (from login page) is now invalid.

-> Django will call get_token() again on this new GET request to /part/add to:
    1. Set a new CSRF cookie with a new secret.
    2. Store that in the session (or request, depending on settings).

If your template has {% csrf_token %} (which it must if it contains a form), the CSRF tag will:
    1. Fetch the new CSRF secret via get_token(request)
    2. Generate a new masked token
    3. Output a hidden input field like:
        <input type="hidden" name="csrfmiddlewaretoken" value="zC7Dfe82...." />

Step 5: User Submits Form (POST /part/add)
Now:
    -> Browser sends POST request with:
      1. CSRF cookie: csrftoken=secret123
      2. Form field: csrfmiddlewaretoken=masked_version_of_secret123

    -> Middleware checks:
      1. Form method is POST ‚Üí CSRF check required.
      2. Reads CSRF cookie ‚Üí gets secret123
      3. Reads csrfmiddlewaretoken, unmasks ‚Üí also gets secret123
      4. ‚úÖ They match ‚Üí request is allowed.



## For more clear, how Django CSRF protection actually works step by step :
1. CSRF Cookie is Set in Browser
-> Django sets a cookie in the user‚Äôs browser:
    Set-Cookie: csrftoken=secretXYZ123...
-> This secret (secretXYZ123...) is stored only in the user's browser cookie ‚Äî Django does not store it on the
server (unless CSRF_USE_SESSIONS is enabled). So Django trusts the cookie value itself as the CSRF secret.
That‚Äôs why subdomains must be trusted, or they can set malicious cookies.

2. Masked Token Rendered in Form via {% csrf_token %}
-> When you render a form using {% csrf_token %}, Django:
    * Takes the csrftoken cookie value (the secret)
    * Generates a random mask
    * XORs the mask with the secret
    * Combines both:
        masked_token = mask + xor(mask, secret)

-> This value is output in your form as:
    <input type="hidden" name="csrfmiddlewaretoken" value="masked_token_here">

-> The masked token looks different every time, but when unmasked, it should give back the same secret that was
in the CSRF cookie.

3. Form is Submitted
Browser sends:
    1. The CSRF cookie: csrftoken=secretXYZ123
    2. The form field: csrfmiddlewaretoken=masked_token (contains a hidden masked secret)

4. CsrfViewMiddleware Unmasks and Compares
Django‚Äôs CsrfViewMiddleware does the following:
    1. Extracts the mask from the submitted csrfmiddlewaretoken (first 32 bytes).
    2. Unmasks the rest to get the original secret (via XOR).
    3. Compares this recovered secret with the csrftoken value in the browser cookie.

‚úÖ If they match ‚Üí Request is allowed
‚ùå If not ‚Üí HTTP 403 Forbidden

